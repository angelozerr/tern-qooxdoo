{"attributes": {"group": "IO", "name": "Resource", "packageName": "qx.bom.rest", "superClass": "qx.event.Emitter", "fullName": "qx.bom.rest.Resource", "type": "bootstrap"}, "type": "class", "children": [{"attributes": {"text": "<p>Client-side wrapper of a <span class=\"caps\">REST</span> resource.</p>\n\n<p>Each instance represents a resource in terms of <span class=\"caps\">REST</span>. A number of actions\n(usually <span class=\"caps\">HTTP</span> methods) unique to the resource can be defined and invoked.\nA resource with its actions is configured declaratively by passing a resource\ndescription to the constructor, or programatically using {@link #map}.</p>\n\n<p>Each action is associated to a route. A route is a combination of method,\n<span class=\"caps\">URL</span> pattern and optional parameter constraints.</p>\n\n<p>An action is invoked by calling a method with the same name. When a <span class=\"caps\">URL</span>\npattern of a route contains positional parameters, those parameters must be\npassed when invoking the associated action. Also, constraints defined in the\nroute must be satisfied.</p>\n\n<p>When an action is invoked, a request is configured according to the associated\nroute, is passed the <span class=\"caps\">URL</span> parameters, request body data, and finally send.\nWhat kind of request is send can be configured by overwriting {@link #_getRequest}.</p>\n\n<p>No contraints on the action&#8217;s name or the scope of the URLs are imposed. However,\nif you want to follow RESTful design patterns it is recommended to name actions\nthe same as the <span class=\"caps\">HTTP</span> action.</p>\n\n<pre class=\"javascript\">\nvar description = {\n \"get\": { method: \"GET\", url: \"/photo/{id}\" },\n \"put\": { method: \"PUT\", url: \"/photo/{id}\"},\n \"post\": { method: \"POST\", url: \"/photos/\"}\n};\nvar photo = new qx.bom.rest.Resource(description);\n// Can also be written: photo.invoke(\"get\", {id: 1});\nphoto.get({id: 1});\n\n// Additionally sets request data (provide it as string or set the content type)\n// In a RESTful environment this creates a new resource with the given 'id'\nphoto.configureRequest(function(req) {\n req.setRequestHeader(\"Content-Type\", \"application/json\");\n});\nphoto.put({id: 1}, {title: \"Monkey\"});\n\n// Additionally sets request data (provide it as string or set the content type)\n// In a RESTful environment this adds a new resource to the resource collection 'photos'\nphoto.configureRequest(function(req) {\n req.setRequestHeader(\"Content-Type\", \"application/json\");\n});\nphoto.post(null, {title: \"Monkey\"});\n</pre>\n\n<p>To check for existence of <span class=\"caps\">URL</span> parameters or constrain them to a certain format, you\ncan add a <code>check</code> property to the description. See {@link #map} for details.</p>\n\n<pre class=\"javascript\">\nvar description = {\n \"get\": { method: \"GET\", url: \"/photo/{id}\", check: { id: /\\d+/ } }\n};\nvar photo = new qx.bom.rest.Resource(description);\n// photo.get({id: \"FAIL\"});\n// -- Error: \"Parameter 'id' is invalid\"\n</pre>\n\n<p>If your description happens to use the same action more than once, consider\ndefining another resource.</p>\n\n<pre class=\"javascript\">\nvar description = {\n \"get\": { method: \"GET\", url: \"/photos\"},\n};\n// Distinguish \"photo\" (singular) and \"photos\" (plural) resource\nvar photos = new qx.bom.rest.Resource(description);\nphotos.get();\n</pre>\n\n<p>Basically, all routes of a resource should point to the same <span class=\"caps\">URL</span> (resource in\nterms of <span class=\"caps\">HTTP</span>). One acceptable exception of this constraint are resources where\nrequired parameters are part of the <span class=\"caps\">URL</span> (<code>/photos/1/</code>) or filter\nresources. For instance:</p>\n\n<pre class=\"javascript\">\nvar description = {\n \"get\": { method: \"GET\", url: \"/photos/{tag}\" }\n};\nvar photos = new qx.bom.rest.Resource(description);\nphotos.get();\nphotos.get({tag: \"wildlife\"})\n</pre>\n\n<p>Strictly speaking, the <code>photos</code> instance represents two distinct resources\nand could therefore just as well mapped to two distinct resources (for instance,\nnamed photos and photosTagged). What style to choose depends on the kind of data\nreturned. For instance, it seems sensible to stick with one resource if the filter\nonly limits the result set (i.e. the invidual results have the same properties).</p>\n\n<p>In order to respond to successful (or erroneous) invocations of actions,\neither listen to the generic &#8220;success&#8221; or &#8220;error&#8221; event and get the action\nfrom the event data, or listen to action specific events defined at runtime.\nAction specific events follow the pattern &#8221;&lt;action&gt;Success&#8221; and\n&#8221;&lt;action&gt;Error&#8221;, e.g. &#8220;indexSuccess&#8221;.</p>"}, "type": "desc"}, {"attributes": {}, "type": "constructor", "children": [{"attributes": {"line": 140, "isCtor": true, "name": "ctor"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"optional": true, "name": "description"}, "type": "param", "children": [{"attributes": {"text": "<p>Each key of the map is interpreted as <code>action</code> name. The value associated to the key must be a map with the properties <code>method</code> and <code>url</code>. <code>check</code> is optional. Also see {@link #map}. For example:</p>\n\n<pre class=\"javascript\"> { get: {method: \"GET\", url: \"/photos/{id}\", check: { id: /\\d+/ }} } </pre>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Map"}, "type": "entry"}]}]}]}, {"attributes": {"text": ""}, "type": "desc"}, {"attributes": {"name": "qx.bom.rest"}, "type": "see", "children": [{"attributes": {"text": ""}, "type": "desc"}]}, {"attributes": {"name": "qx.io.rest"}, "type": "see", "children": [{"attributes": {"text": ""}, "type": "desc"}]}]}]}, {"attributes": {}, "type": "events", "children": [{"attributes": {"name": "actionError"}, "type": "event", "children": [{"attributes": {"text": "<p>Fired when any request associated to action given in prefix fails.</p>\n\n<p>For example, &#8220;indexError&#8221; is fired when <code>index()</code> failed.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "qx.bom.rest.Resource"}, "type": "entry"}]}]}, {"attributes": {"name": "actionSuccess"}, "type": "event", "children": [{"attributes": {"text": "<p>Fired when request associated to action given in prefix was successful.</p>\n\n<p>For example, &#8220;indexSuccess&#8221; is fired when <code>index()</code> was\nsuccessful.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "qx.bom.rest.Resource"}, "type": "entry"}]}]}, {"attributes": {"name": "error"}, "type": "event", "children": [{"attributes": {"text": "<p>Fired when any request fails.</p>\n\n<p>The action the failed request is associated to, as well as the\nrequest itself, can be retrieved from the event&#8217;s properties.\nAdditionally, an action specific event is fired that follows the pattern\n&#8221;Error&#8221;, e.g. &#8220;indexError&#8221;.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "qx.bom.rest.Resource"}, "type": "entry"}]}]}, {"attributes": {"name": "success"}, "type": "event", "children": [{"attributes": {"text": "<p>Fired when any request was successful.</p>\n\n<p>The action the successful request is associated to, as well as the\nrequest itself, can be retrieved from the event&#8217;s properties.\nAdditionally, an action specific event is fired that follows the pattern\n&#8221;Success&#8221;, e.g. &#8220;indexSuccess&#8221;.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "qx.bom.rest.Resource"}, "type": "entry"}]}]}]}, {"attributes": {}, "type": "constants", "children": [{"attributes": {"type": "Number", "name": "POLL_THROTTLE_COUNT", "value": "30"}, "type": "constant", "children": [{"attributes": {"text": "<p>Number of immediate long-poll responses accepted before throttling takes place.</p>"}, "type": "desc"}]}, {"attributes": {"type": "Boolean", "name": "REQUIRED", "value": "true"}, "type": "constant", "children": [{"attributes": {"text": "<p>A symbol used in checks to declare required parameter.</p>"}, "type": "desc"}]}, {"attributes": {"type": "Number", "name": "POLL_THROTTLE_LIMIT", "value": "100"}, "type": "constant", "children": [{"attributes": {"text": "<p>Number of milliseconds below a long-poll request is considered immediate and\nsubject to throttling checks.</p>"}, "type": "desc"}]}]}, {"attributes": {}, "type": "methods-static", "children": [{"attributes": {"line": 222, "isStatic": true, "name": "placeholdersFromUrl"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "url"}, "type": "param", "children": [{"attributes": {"text": "<p>The <span class=\"caps\">URL</span> to parse for placeholders.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Get placeholders from <span class=\"caps\">URL</span>.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>Array of placeholders without the placeholder prefix.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Array"}, "type": "entry"}]}]}]}]}, {"attributes": {}, "type": "methods", "children": [{"attributes": {"access": "private", "line": 568, "name": "__checkParameters"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "params"}, "type": "param", "children": [{"attributes": {"text": "<p>Parameters.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Map"}, "type": "entry"}]}]}, {"attributes": {"name": "check"}, "type": "param", "children": [{"attributes": {"text": "<p>Checks.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Map"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Check parameters.</p>"}, "type": "desc"}]}, {"attributes": {"access": "private", "line": 634, "name": "__configureJsonRequest"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "req"}, "type": "param", "children": [{"attributes": {"text": "<p>Request.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "qx.bom.request.SimpleXhr"}, "type": "entry"}, {"attributes": {"type": "qx.io.request.AbstractRequest"}, "type": "entry"}]}]}, {"attributes": {"name": "config"}, "type": "param", "children": [{"attributes": {"text": "<p>Configuration.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Map"}, "type": "entry"}]}]}, {"attributes": {"name": "data"}, "type": "param", "children": [{"attributes": {"text": "<p>Data.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Map"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Serialize data to <span class=\"caps\">JSON</span> when content type indicates.</p>"}, "type": "desc"}]}, {"attributes": {"access": "private", "line": 611, "name": "__configureRequest"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "req"}, "type": "param", "children": [{"attributes": {"text": "<p>Request.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "qx.bom.request.SimpleXhr"}, "type": "entry"}, {"attributes": {"type": "qx.io.request.AbstractRequest"}, "type": "entry"}]}]}, {"attributes": {"name": "config"}, "type": "param", "children": [{"attributes": {"text": "<p>Configuration.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Map"}, "type": "entry"}]}]}, {"attributes": {"name": "data"}, "type": "param", "children": [{"attributes": {"text": "<p>Data.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Map"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Configure request.</p>"}, "type": "desc"}]}, {"attributes": {"access": "private", "line": 417, "name": "__createRequest"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "action"}, "type": "param", "children": [{"attributes": {"text": "<p>The action the created request is associated to.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Create request.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>Request object</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "qx.bom.request.SimpleXhr"}, "type": "entry"}, {"attributes": {"type": "qx.io.request.AbstractRequest"}, "type": "entry"}]}]}]}, {"attributes": {"access": "private", "line": 953, "name": "__declareEvent"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "type"}, "type": "param", "children": [{"attributes": {"text": "<p>Type of event.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Declare event at runtime.</p>"}, "type": "desc"}]}, {"attributes": {"access": "private", "line": 932, "name": "__mapFromDescription"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "description"}, "type": "param", "children": [{"attributes": {"text": "<p>Map that defines the routes.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Map"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Map actions from description.</p>\n\n<p>Allows to decoratively define routes.</p>"}, "type": "desc"}]}, {"attributes": {"access": "protected", "line": 406, "name": "_getRequest"}, "type": "method", "children": [{"attributes": {"text": "<p>Get request.</p>\n\n<p>May be overriden to change type of request.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>Request object</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "qx.bom.request.SimpleXhr"}, "type": "entry"}, {"attributes": {"type": "qx.io.request.AbstractRequest"}, "type": "entry"}]}]}]}, {"attributes": {"access": "protected", "line": 872, "name": "_getRequestConfig"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "action"}, "type": "param", "children": [{"attributes": {"text": "<p>Action associated to request.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"name": "params"}, "type": "param", "children": [{"attributes": {"text": "<p>Parameters to embed in request.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Map"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Get request configuration for action and parameters.</p>\n\n<p>This is were placeholders are replaced with parameters.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>Map of configuration settings. Has the properties <code>method</code>, <code>url</code> and <code>check</code>.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Map"}, "type": "entry"}]}]}]}, {"attributes": {"access": "protected", "line": 326, "name": "_getRequestHandler"}, "type": "method", "children": [{"attributes": {"text": "<p>Provides the request callbacks for &#8216;onsuccess&#8217;, &#8216;onfail&#8217; and &#8216;onloadend&#8217;.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>Map defining callbacks and their context. For example:</p>\n\n<pre class=\"javascript\"> { onsuccess: { callback: function(req, action) { ... }, context: obj } onfail: { callback: function(req, action) { ... }, context: obj } onloadend: { callback: function(req, action) { ... }, context: obj } } </pre>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Map"}, "type": "entry"}]}]}]}, {"attributes": {"access": "protected", "line": 921, "name": "_getThrottleCount"}, "type": "method", "children": [{"attributes": {"text": "<p>Override to adjust the throttle count.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>Throttle count</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}]}, {"attributes": {"access": "protected", "line": 913, "name": "_getThrottleLimit"}, "type": "method", "children": [{"attributes": {"text": "<p>Override to adjust the throttle limit.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>Throttle limit in milliseconds</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}]}, {"attributes": {"access": "protected", "line": 760, "name": "_startPoll"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "action"}, "type": "param", "children": [{"attributes": {"text": "<p>Action to poll.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"name": "listener"}, "type": "param", "children": [{"attributes": {"text": "<p>The function to repeatedly execute at the given interval.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Function"}, "type": "entry"}]}]}, {"attributes": {"name": "interval"}, "type": "param", "children": [{"attributes": {"text": "<p>Interval in ms.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Number"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Start a poll process.</p>"}, "type": "desc"}]}, {"attributes": {"line": 666, "name": "abort"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "varargs"}, "type": "param", "children": [{"attributes": {"text": "<p>Action of which all invocations to abort (when string), or a single invocation of an action to abort (when number)</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}, {"attributes": {"type": "Number"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Abort action.</p>\n\n<p>Example:</p>\n\n<pre class=\"javascript\">\n  // Abort all invocations of action\n  res.get({id: 1});\n  res.get({id: 2});\n  res.abort(\"get\");\n\n  // Abort specific invocation of action (by id)\n  var actionId = res.get({id: 1});\n  res.abort(actionId);\n</pre>"}, "type": "desc"}]}, {"attributes": {"line": 396, "name": "configureRequest"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "callback"}, "type": "param", "children": [{"attributes": {"text": "<p>Function called before request is send. Receives request, action, params and data.</p>\n\n<pre class=\"javascript\"> res.configureRequest(function(req, action, params, data) { if (action === \"index\") { req.setRequestHeader(\"Accept\", \"application/json\"); } }); </pre>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Function"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Configure request.</p>"}, "type": "desc"}]}, {"attributes": {"line": 1048, "name": "destruct"}, "type": "method", "children": [{"attributes": {"text": "<p>Desctructs the Resource.</p>\n\n<p>All created requests, routes and pollTimers will be disposed.</p>"}, "type": "desc"}]}, {"attributes": {"line": 983, "name": "dispose"}, "type": "method", "children": [{"attributes": {"text": "<p>Dispose this object</p>"}, "type": "desc"}]}, {"attributes": {"access": "internal", "isInternal": true, "line": 377, "name": "getRequestsByAction"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "action"}, "type": "param", "children": [{"attributes": {"text": "<p>The action (e.g. &#8220;get&#8221;, &#8220;post&#8221; ...).</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Retrieve the currently stored request objects for an action.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>Request objects.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Array"}, "type": "entry"}, {"attributes": {"type": "null"}, "type": "entry"}]}]}]}, {"attributes": {"line": 502, "name": "invoke"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "action"}, "type": "param", "children": [{"attributes": {"text": "<p>Action to invoke.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"name": "params"}, "type": "param", "children": [{"attributes": {"text": "<p>Map of parameters inserted into <span class=\"caps\">URL</span> when a matching positional parameter is found.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Map"}, "type": "entry"}]}]}, {"attributes": {"name": "data"}, "type": "param", "children": [{"attributes": {"text": "<p>Data to be send as part of the request. See {@link qx.bom.request.SimpleXhr#getRequestData}. See {@link qx.io.request.AbstractRequest#requestData}.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Map"}, "type": "entry"}, {"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Invoke action with parameters.</p>\n\n<p>Internally called by actions dynamically created.</p>\n\n<p>May be overriden to customize action and parameter handling.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>Id of the action&#8217;s invocation.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Number"}, "type": "entry"}]}]}]}, {"attributes": {"line": 974, "name": "isDisposed"}, "type": "method", "children": [{"attributes": {"text": "<p>Returns true if the object is disposed.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>Whether the object has been disposed</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"line": 815, "name": "longPoll"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "action"}, "type": "param", "children": [{"attributes": {"text": "<p>Action to poll.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Long-poll action.</p>\n\n<p>Use Ajax long-polling to continously fetch a resource as soon as the\nserver signals new data. The server determines when new data is available,\nwhile the client keeps open a request. Requires configuration on the\nserver side. Basically, the server must not close a connection until\nnew data is available. For a high level introduction to long-polling,\nrefer to <a href=\"http://en.wikipedia.org/wiki/Comet_(programming)#Ajax_with_long_polling\">\nAjax with long polling</a>.</p>\n\n<p>Uses {@link #refresh} internally. Make sure you understand the\nimplications of IE&#8217;s tendency to cache overly agressive.</p>\n\n<p>Note no interval is given on the client side.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>Id of handler responsible for long-polling. To stop polling, remove handler using {@link qx.core.Object#removeListenerById}.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"line": 453, "name": "map"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "action"}, "type": "param", "children": [{"attributes": {"text": "<p>Action to associate to request.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"name": "method"}, "type": "param", "children": [{"attributes": {"text": "<p>Method to configure request with.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"name": "url"}, "type": "param", "children": [{"attributes": {"text": "<p><span class=\"caps\">URL</span> to configure request with. May contain positional parameters (<code>{param}</code>) that are replaced by values given when the action is invoked. Parameters are optional, unless a check is defined. A default value can be provided (<code>{param=default}</code>).</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"optional": true, "name": "check"}, "type": "param", "children": [{"attributes": {"text": "<p>Map defining parameter constraints, where the key is the <span class=\"caps\">URL</span> parameter and the value a regular expression (to match string) or <code>qx.bom.rest.Resource.REQUIRED</code> (to verify existence).</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Map"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Map action to combination of method and <span class=\"caps\">URL</span> pattern.</p>\n\n<pre class=\"javascript\">\n  res.map(\"get\", \"GET\", \"/photos/{id}\", {id: /\\d+/});\n\n  // GET /photos/123\n  res.get({id: \"123\"});\n</pre>"}, "type": "desc"}]}, {"attributes": {"line": 720, "name": "poll"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "action"}, "type": "param", "children": [{"attributes": {"text": "<p>Action to poll.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"name": "interval"}, "type": "param", "children": [{"attributes": {"text": "<p>Interval in ms.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Number"}, "type": "entry"}]}]}, {"attributes": {"optional": true, "name": "params"}, "type": "param", "children": [{"attributes": {"text": "<p>Map of parameters. See {@link #invoke}.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Map"}, "type": "entry"}]}]}, {"attributes": {"defaultValue": "false", "optional": true, "name": "immediately"}, "type": "param", "children": [{"attributes": {"text": "<code>true</code>, if the poll should invoke a call immediately."}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Periodically invoke action.</p>\n\n<p>Replays parameters given when action was invoked originally. When the\naction was not yet invoked and requires parameters, parameters must be\ngiven.</p>\n\n<p>Please note that IE tends to cache overly agressive. One work-around is\nto disable caching on the client side by configuring the request with\n<code>setCache(false)</code>. If you control the server, a better\nwork-around is to include appropriate headers to explicitly control\ncaching. This way you still avoid requests that can be correctly answered\nfrom cache (e.g. when nothing has changed since the last poll). Please\nrefer to <a href=\"http://www.mnot.net/javascript/xmlhttprequest/cache.html\">\nXMLHttpRequest Caching Test</a> for available options.</p>"}, "type": "desc"}]}, {"attributes": {"line": 692, "name": "refresh"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "action"}, "type": "param", "children": [{"attributes": {"text": "<p>Action to refresh.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Resend request associated to action.</p>\n\n<p>Replays parameters given when action was invoked originally.</p>"}, "type": "desc"}]}, {"attributes": {"line": 785, "name": "restartPollByAction"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "action"}, "type": "param", "children": [{"attributes": {"text": "<p>Action to poll.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Restarts a poll process by the associated action.</p>"}, "type": "desc"}]}, {"attributes": {"line": 558, "name": "setBaseUrl"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "baseUrl"}, "type": "param", "children": [{"attributes": {"text": "<p>Base <span class=\"caps\">URL</span>.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Set base <span class=\"caps\">URL</span>.</p>\n\n<p>The base <span class=\"caps\">URL</span> is prepended to the URLs given in the description.\nChanges affect all future invocations.</p>"}, "type": "desc"}]}, {"attributes": {"access": "internal", "isInternal": true, "line": 268, "name": "setRequestFactory"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "fn"}, "type": "param", "children": [{"attributes": {"text": "<p>Function which returns request instances.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Function"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Set a request factory function to switch the request implementation.\nThe created requests have to implement {@link qx.io.request.AbstractRequest}.</p>"}, "type": "desc"}]}, {"attributes": {"access": "internal", "isInternal": true, "line": 298, "name": "setRequestHandler"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "handler"}, "type": "param", "children": [{"attributes": {"text": "<p>Map defining callbacks and their context. For example:</p>\n\n<pre class=\"javascript\"> { onsuccess: { callback: function(req, action) { ... }, context: obj } onfail: { callback: function(req, action) { ... }, context: obj } onloadend: { callback: function(req, action) { ... }, context: obj } } </pre>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Map"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Sets request callbacks for &#8216;onsuccess&#8217;, &#8216;onfail&#8217; and &#8216;onloadend&#8217;.</p>"}, "type": "desc"}]}, {"attributes": {"line": 773, "name": "stopPollByAction"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "action"}, "type": "param", "children": [{"attributes": {"text": "<p>Action to poll.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Stops a poll process by the associated action.</p>"}, "type": "desc"}]}]}]}